---
import Main from "@layouts/main.astro";
---

<Main>
  <div class="flex justify-center items-center w-full h-full">
    <canvas id="webgl"></canvas>
  </div>
</Main>

<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/addons/controls/OrbitControls";
  import GUI from "lil-gui";
  import gsap from "gsap";

  const gui = new GUI();
  gui.close();
  gui.hide();
  window.addEventListener("keydown", (ev) => {
    if (ev.key === "h") {
      gui.show(gui._hidden);
    }
  });

  const debugObject = {
    color: "#813d9c",
    spin: undefined,
    subdivision: 2,
  };

  const dimensions = {
    width: 800,
    height: 600,
  };

  const cubeFolder = gui.addFolder("Cube Props");

  const canvas = document.getElementById("webgl");
  const scene = new THREE.Scene();

  const object = new THREE.Mesh(
    new THREE.BoxGeometry(1, 1, 1, 2, 2, 2),
    new THREE.MeshBasicMaterial({ color: debugObject.color }),
  );
  scene.add(object);

  cubeFolder
    .add(object.position, "y")
    .min(-3)
    .max(3)
    .step(0.01)
    .name("Elevation");
  cubeFolder.add(object, "visible");
  cubeFolder.add(object.material, "wireframe");
  cubeFolder.addColor(debugObject, "color").onChange(() => {
    object.material.color.set(debugObject.color);
  });

  debugObject.spin = () => {
    gsap.to(object.rotation, { y: object.rotation.y + Math.PI * 2 });
  };

  cubeFolder.add(debugObject, "spin");
  cubeFolder
    .add(debugObject, "subdivision")
    .min(1)
    .max(10)
    .step(1)
    .onFinishChange(() => {
      object.geometry.dispose();
      object.geometry = new THREE.BoxGeometry(
        1,
        1,
        1,
        debugObject.subdivision,
        debugObject.subdivision,
        debugObject.subdivision,
      );
    });

  const camera = new THREE.PerspectiveCamera(
    60,
    dimensions.width / dimensions.height,
  );
  camera.lookAt(object.position);
  camera.position.z = 3;
  scene.add(camera);

  const controls = new OrbitControls(camera, canvas);
  controls.enableDamping = true;

  const renderer = new THREE.WebGLRenderer({ canvas });
  renderer.setSize(dimensions.width, dimensions.height);

  const tick = () => {
    controls.update();
    renderer.render(scene, camera);
    requestAnimationFrame(tick);
  };
  tick();
</script>
