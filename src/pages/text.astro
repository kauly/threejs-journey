---
import Main from "@layouts/main.astro";
---

<Main>
  <canvas id="webgl"></canvas>
</Main>

<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
  import { FontLoader } from "three/examples/jsm/loaders/FontLoader.js";
  import { TextGeometry } from "three/examples/jsm/geometries/TextGeometry.js";
  import GUI from "lil-gui";

  /**
   * Base
   */
  // Debug
  const gui = new GUI();

  // Canvas
  const canvas = document.getElementById("webgl");

  // Scene
  const scene = new THREE.Scene();

  /**
   * Textures
   */
  const textureLoader = new THREE.TextureLoader();
  const matcapTexture = textureLoader.load("/textures/matcaps/7.png");
  matcapTexture.colorSpace = THREE.SRGBColorSpace;
  const material = new THREE.MeshMatcapMaterial({ matcap: matcapTexture });

  /**
   * Fonts
   */
  const fontLoader = new FontLoader();
  fontLoader.load("/fonts/helvetiker_regular.typeface.json", (font) => {
    console.log("font loaded!!");
    const textGeometry = new TextGeometry("Kauly", {
      font,
      size: 0.5,
      height: 0.2,
      curveSegments: 4,
      bevelEnabled: true,
      bevelThickness: 0.03,
      bevelOffset: 0,
      bevelSize: 0.02,
      bevelSegments: 3,
    });
    textGeometry.computeBoundingBox();
    const bbox = textGeometry.boundingBox;
    textGeometry.translate(
      -(bbox?.max.x - 0.02) * 0.5,
      -(bbox?.max.y - 0.02) * 0.5,
      -(bbox?.max.z - 0.02) * 0.5,
    );

    const text = new THREE.Mesh(textGeometry, material);

    scene.add(text);
  });

  console.time("donuts");
  const geometry = new THREE.TorusGeometry(0.3, 0.2, 20, 45);

  for (let index = 0; index < 500; index++) {
    const mesh = new THREE.Mesh(geometry, material);

    mesh.position.x = (Math.random() - 0.5) * 10;
    mesh.position.y = (Math.random() - 0.5) * 10;
    mesh.position.z = (Math.random() - 0.5) * 10;

    mesh.rotation.x = Math.PI * Math.random();
    mesh.rotation.y = Math.PI * Math.random();

    const scale = Math.random();
    mesh.scale.set(scale, scale, scale);

    scene.add(mesh);
  }
  console.timeEnd("donuts");

  /**
   * Sizes
   */
  const sizes = {
    width: window.innerWidth,
    height: window.innerHeight,
  };

  window.addEventListener("resize", () => {
    // Update sizes
    sizes.width = window.innerWidth;
    sizes.height = window.innerHeight;

    // Update camera
    camera.aspect = sizes.width / sizes.height;
    camera.updateProjectionMatrix();

    // Update renderer
    renderer.setSize(sizes.width, sizes.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  });

  /**
   * Camera
   */
  // Base camera
  const camera = new THREE.PerspectiveCamera(
    75,
    sizes.width / sizes.height,
    0.1,
    100,
  );
  camera.position.x = 1;
  camera.position.y = 1;
  camera.position.z = 2;
  scene.add(camera);

  // Controls
  const controls = new OrbitControls(camera, canvas);
  controls.enableDamping = true;

  /**
   * Renderer
   */
  const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
  });
  renderer.setSize(sizes.width, sizes.height);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

  /**
   * Animate
   */
  const clock = new THREE.Clock();

  const tick = () => {
    const elapsedTime = clock.getElapsedTime();

    // Update controls
    controls.update();

    // Render
    renderer.render(scene, camera);

    // Call tick again on the next frame
    window.requestAnimationFrame(tick);
  };

  tick();
</script>
