---
import Main from "@layouts/main.astro";
---

<Main>
  <canvas id="webgl"></canvas>
</Main>

<script>
  import * as THREE from "three";
  import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
  import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader.js";
  import gsap from "gsap";
  import GUI from "lil-gui";

  const gui = new GUI();
  /**
   * Base
   */
  // Canvas
  const canvas = document.getElementById("webgl");

  // Scene
  const scene = new THREE.Scene();

  // textures

  const textureLoader = new THREE.TextureLoader();

  const doorColorTexture = textureLoader.load("/textures/door/color.jpg");
  const doorMinecraftTexture = textureLoader.load("/textures/minecraft.png");
  const doorAlphaTexture = textureLoader.load("/textures/door/alpha.jpg");
  const doorHeightTexture = textureLoader.load("/textures/door/height.jpg");
  const doorNormalTexture = textureLoader.load("/textures/door/normal.jpg");
  const doorAmbientOcclusionTexture = textureLoader.load(
    "/textures/door/ambientOcclusion.jpg",
  );
  const doorMetalnessTexture = textureLoader.load(
    "/textures/door/metalness.jpg",
  );
  const doorRoughnessTexture = textureLoader.load(
    "/textures/door/roughness.jpg",
  );

  const matcapTexture = textureLoader.load("/textures/matcaps/1.png");
  const gradientTexture = textureLoader.load("/textures/gradients/5.jpg");

  doorColorTexture.colorSpace = THREE.SRGBColorSpace;
  matcapTexture.colorSpace = THREE.SRGBColorSpace;

  // Meshes

  /*   const material = new THREE.MeshBasicMaterial();
  material.map = doorColorTexture;
  material.opacity = 0.5;
  material.transparent = true;
  material.side = THREE.DoubleSide;
 */

  /*   const material = new THREE.MeshNormalMaterial();
  material.side = THREE.DoubleSide;
  material.flatShading = true;
 */

  /*   const material = new THREE.MeshMatcapMaterial();
  material.matcap = matcapTexture;
  material.side = THREE.DoubleSide; */

  // const material = new THREE.MeshLambertMaterial();

  /*  const material = new THREE.MeshPhongMaterial();
  material.shininess = 100;
  material.specular = new THREE.Color(0x1188ff); */

  /*   const material = new THREE.MeshToonMaterial();
  gradientTexture.magFilter = THREE.NearestFilter;
  gradientTexture.minFilter = THREE.NearestFilter;
  gradientTexture.generateMipmaps = false;
  material.gradientMap = gradientTexture; */

  /*   const material = new THREE.MeshStandardMaterial();
  material.side = THREE.DoubleSide;
  material.roughness = 1;
  material.metalness = 1;
  material.map = doorColorTexture;
  material.aoMap = doorAmbientOcclusionTexture;
  material.aoMapIntensity = 1;
  material.displacementMap = doorHeightTexture;
  material.displacementScale = 0.1;
  material.metalnessMap = doorMetalnessTexture;
  material.roughnessMap = doorRoughnessTexture;
  material.normalMap = doorNormalTexture;
  material.transparent = true;
  material.alphaMap = doorAlphaTexture;

  gui.add(material, "roughness").min(0).max(1).step(0.0001);
  gui.add(material, "metalness").min(0).max(1).step(0.0001); */

  const material = new THREE.MeshPhysicalMaterial();
  material.side = THREE.DoubleSide;
  material.roughness = 1;
  material.metalness = 1;
  /*   material.map = doorColorTexture;
  material.aoMap = doorAmbientOcclusionTexture;
  material.aoMapIntensity = 1;
  material.displacementMap = doorHeightTexture;
  material.displacementScale = 0.1;
  material.metalnessMap = doorMetalnessTexture;
  material.roughnessMap = doorRoughnessTexture;
  material.normalMap = doorNormalTexture; */
  // material.transparent = true;
  // material.alphaMap = doorAlphaTexture;
  /*
   */

  gui.add(material, "roughness").min(0).max(1).step(0.0001);
  gui.add(material, "metalness").min(0).max(1).step(0.0001);

  /*   material.clearcoat = 1;
  material.clearcoatRoughness = 0;

  gui.add(material, "clearcoat").min(0).max(1).step(0.0001);
  gui.add(material, "clearcoatRoughness").min(0).max(1).step(0.0001); */

  /*   material.sheen = 1;
  material.sheenColor.set(1, 1, 1);
  material.sheenRoughness = 0.25;

  gui.add(material, "sheen").min(0).max(1).step(0.0001);
  gui.add(material, "sheenRoughness").min(0).max(1).step(0.0001);
  gui.addColor(material, "sheenColor");
 */

  /*   material.iridescence = 0.25;
  material.iridescenceIOR = 1;
  material.iridescenceThicknessRange = [100, 800];

  gui.add(material, "iridescence").min(0).max(1).step(0.0001);
  gui.add(material, "iridescenceIOR").min(1).max(2.33).step(0.0001);
  gui.add(material.iridescenceThicknessRange, "0").min(1).max(1000).step(100);
  gui.add(material.iridescenceThicknessRange, "1").min(1).max(1000).step(100) */
  material.transmission = 1;
  material.ior = 1.5;
  material.thickness = 0.5;

  gui.add(material, "transmission").min(0).max(1).step(0.0001);
  gui.add(material, "ior").min(1).max(10).step(0.0001);
  gui.add(material, "thickness").min(0).max(1).step(0.0001);

  const sphere = new THREE.Mesh(new THREE.SphereGeometry(1, 60, 60), material);
  const plane = new THREE.Mesh(
    new THREE.PlaneGeometry(1, 1, 100, 100),
    material,
  );
  const torus = new THREE.Mesh(new THREE.TorusGeometry(), material);

  sphere.position.x = -2;
  torus.position.x = 2;
  scene.add(sphere);
  scene.add(plane);
  scene.add(torus);

  /**
   * Sizes
   */
  const sizes = {
    width: window.innerWidth,
    height: window.innerHeight,
  };

  window.addEventListener("resize", () => {
    // Update sizes
    sizes.width = window.innerWidth;
    sizes.height = window.innerHeight;

    // Update camera
    camera.aspect = sizes.width / sizes.height;
    camera.updateProjectionMatrix();

    // Update renderer
    renderer.setSize(sizes.width, sizes.height);
    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  });

  // light
  /*  const ambientLight = new THREE.AmbientLight(0xffffff, 1);
  scene.add(ambientLight);

  const pointLight = new THREE.PointLight(0xffffff, 30);
  pointLight.position.x = 2;
  pointLight.position.y = 3;
  pointLight.position.z = 4;
  scene.add(pointLight); */

  const rbgeLoader = new RGBELoader();
  rbgeLoader.load("/textures/environmentMap/2k.hdr", (environmentMap) => {
    environmentMap.mapping = THREE.EquirectangularRefractionMapping;
    scene.background = environmentMap;
    scene.environment = environmentMap;
  });

  /**
   * Camera
   */
  // Base camera
  const camera = new THREE.PerspectiveCamera(
    75,
    sizes.width / sizes.height,
    0.1,
    100,
  );
  camera.position.x = 1;
  camera.position.y = 1;
  camera.position.z = 2;
  scene.add(camera);

  // Controls
  const controls = new OrbitControls(camera, canvas);
  controls.enableDamping = true;

  /**
   * Renderer
   */
  const renderer = new THREE.WebGLRenderer({
    canvas: canvas,
  });
  renderer.setSize(sizes.width, sizes.height);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));

  /**
   * Animate
   */
  const clock = new THREE.Clock();

  const tick = () => {
    gsap.to(sphere.rotation, {
      y: sphere.rotation.y + Math.PI * 0.02,
      x: sphere.rotation.y + Math.PI * 0.02,
    });
    gsap.to(torus.rotation, {
      y: torus.rotation.y + Math.PI * 0.02,
      x: torus.rotation.y + Math.PI * 0.02,
    });
    gsap.to(plane.rotation, {
      y: plane.rotation.y + Math.PI * 0.02,
      x: plane.rotation.y + Math.PI * 0.02,
    });

    // Update controls
    controls.update();

    // Render
    renderer.render(scene, camera);

    // Call tick again on the next frame
    window.requestAnimationFrame(tick);
  };

  tick();
</script>
